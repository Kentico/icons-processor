import * as path from 'path';import * as fs from 'fs';import {  IconItem,  SelectionJson,} from './types/selectionJsonType';const defaultIconsSelectionPath = path.join(__dirname, '..', 'defaultIconsSelectionJsonSource', 'selection.json');const defaultOutputIconVariablesFilePath = path.join(__dirname, '..', 'defaultIconVariablesOutput', 'icon-variables.less');async function loadSelectionJson(iconsSelectionPath: string): Promise<SelectionJson> {  const selectionJson = await readFilePromise(iconsSelectionPath);  return JSON.parse(selectionJson);}function compareIconNames(iconA: IconItem, iconB: IconItem): -1 | 0 | 1 {  const nameA = iconA.properties.name;  const nameB = iconB.properties.name;  if (nameA > nameB) {    return 1;  }  else if (nameA < nameB) {    return -1;  }  else {    return 0;  }}async function readFilePromise(fileName: fs.PathLike, options: { encoding?: string; flag?: string; } = { encoding: 'utf8' }): Promise<any> {  return new Promise((resolve, reject) => {    fs.readFile(fileName, options, (err: NodeJS.ErrnoException, data: any) => {      if (err) {        reject(err);      }      else {        resolve(data);      }    });  });}async function writeFilePromise(  fileName: fs.PathLike,  data: any,  options: { encoding?: string; flag?: string; } = { encoding: 'utf8' },): Promise<void> {  return new Promise<void>((resolve, reject) => {    fs.writeFile(fileName, data, options, (err: NodeJS.ErrnoException) => {      if (err) {        reject(err);      }      else {        resolve();      }    });  });}export async function processIcons(params: { customIconsSelectionPath?: string, customIconVariablesOutputPath?: string }): Promise<void> {  const iconsSelectionPath = params.customIconsSelectionPath ? params.customIconsSelectionPath : defaultIconsSelectionPath;  const iconVariablesOutputPath = params.customIconVariablesOutputPath ? params.customIconVariablesOutputPath : defaultOutputIconVariablesFilePath;  const selectionJson = await loadSelectionJson(iconsSelectionPath);  const iconVariables = selectionJson.icons.sort(compareIconNames).reduce((reduced, iconItem) => {    const iconVariable = `@icon-${iconItem.properties.name}: "\\${iconItem.properties.code.toString(16)}";\n`;    return reduced.concat(iconVariable);  }, '');  await writeFilePromise(iconVariablesOutputPath, iconVariables);}